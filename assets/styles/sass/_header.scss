@use 'mixins';
@use 'sass:map';
@use 'sass:list';
@use 'util';

.site-header {
  --_anim_time_1: .25s;
  --_anim_time_2: .2s;

  --_border-width: .125em;
  --_border-color: var(--clr-light-txt-100);
  --_padding-block: calc(var(--site-padding-inline) * 2 / 3);
  inline-size: 100%;
  block-size: var(--header-block-size);
  background-color: var(--clr-header-bg);
  padding: 0 var(--outer-padding-inline);
  position: relative;
  isolation: isolate;
  display: flex;
  justify-content: space-between;
  align-items: center;
  box-shadow: 0 var(--_border-width) 0px var(--_border-color);

  a:not(.btn) {
    color: currentColor;
    text-decoration: none;
  }

  @at-root .site-title {
    padding-block: var(--_padding-block);
    block-size: 100%;
    position: relative;
    z-index: 999;
  
    a {
      display: inline-block;
      block-size: 100%;
    }
  
    svg {
      block-size: 100%;

      @media not (prefers-reduced-motion: reduce) {
        & > g {
          *, * g {
            transition: fill var(--_anim_time_2) ease;
          }
        }
      }
    }

    &:has(~ .site-nav-toggle[aria-expanded='true']) {
      svg > g {
        *, * g {
          fill: #fff !important;
        }
      }
    }
  }

  .skip-nav {
    position: absolute;
    inset: auto auto 0 var(--site-padding-inline);
    translate: 0 100%;
  }

  .site-nav-toggle {
    display: none;

    @include mixins.mobile-nav {
      display: revert;
    }

    $nav: (
      size: 32px,
      line-height: 4px,
      radius: 1px
    );

    svg {
      --_size: 2rem;
      width: var(--_size);
      height: var(--_size);
      display: block;
      position: relative;
      z-index: 999;

      rect {
        fill: currentColor;
        width: map.get($nav, size);
        height: map.get($nav, line-height);
        rx: map.get($nav, radius);
        transform-origin: center center;

        @media not (prefers-reduced-motion: reduce) {
          transition:
            rotate var(--_anim_time_2) ease,
            y var(--_anim_time_1) ease var(--_anim_time_2),
            width 0s linear var(--_anim_time_2),
            fill var(--_anim_time_2) ease;
        }
      
        &:nth-child(1) {
          y: 0px;
        }
      
        &:nth-child(2) {
          x: #{map.get($nav, size) * 0.2};
          width: #{map.get($nav, size) * 0.8};
          y: #{map.get($nav, size) * 0.5 - map.get($nav, line-height) * 0.5};
        }
      
        &:nth-child(3) {
          y: #{map.get($nav, size) - map.get($nav, line-height)};
        }
      }
    }

    &[aria-expanded='true'] {
      svg rect {
        fill: #fff !important;

        @media not (prefers-reduced-motion: reduce) {
          transition:
            rotate var(--_anim_time_1) ease var(--_anim_time_2),
            y var(--_anim_time_1) ease,
            width 0s linear var(--_anim_time_1);
        }

        &:nth-child(1) {
          y: #{map.get($nav, size) * 0.5 - map.get($nav, line-height) * 0.5};
          rotate: -45deg;
        }
        &:nth-child(2) {
          width: 0;
        }
        &:nth-child(3) {
          y: #{map.get($nav, size) * 0.5 - map.get($nav, line-height) * 0.5};
          rotate: 45deg;
        }
      }
    }
  }
}

.site-nav {
  $selectors: (&);

  li {
    list-style: none;
  }

  & > ul {
    $selectors: list.append($selectors, &);

    display: flex;

    & > li {
      $selectors: list.append($selectors, &);
      --_padding-inline: .5em;

      :where(a, button) {
        $selectors: list.append($selectors, &);

        display: flex;
        align-items: center;
        padding-inline: var(--_padding-inline);
        font-size: 1.2em;
        font-weight: 500;
        letter-spacing: .03em;
        white-space: nowrap;

        &:where(:hover, :focus-visible) {
          background-color: hsl(from var(--clr-light-txt-100) h s l / 33.333%);
        }

        @at-root #{list.join($selectors, ',')} {
          block-size: 100%;
        }
      }

      &:has([aria-current]) > :where(a, button) {
        box-shadow: inset 0 -.2em 0 var(--clr-accent-400);
      }

      list-style-type: none;
      position: relative;

      & > ul {
        opacity: 0;
        scale: 1 0;
        transform-origin: center top;
        position: absolute;
        inset: var(--header-block-size) auto auto 0;
        background-color: var(--clr-header-bg);;
        border: max(calc(var(--_border-width) / 2), 1px) solid var(--_border-color);
        border-block-start-width: var(--_border-width);
        min-inline-size: 100%;
  
        @media not (prefers-reduced-motion: reduce) {
          transition:
            scale var(--_anim_time_1) ease,
            opacity var(--_anim_time_2) ease;
        }

        li:has(> hr) {
          padding-inline: var(--_padding-inline);

          & > hr {
            border: none;
            border-block-start: max(calc(var(--_border-width) / 2), 1px) solid var(--_border-color);
          }
        }

        & > li {
          &:has([aria-current]) > :where(a, button) {
            box-shadow: inset .2em 0 0 var(--clr-accent-400);
          }

          & > :where(a, button) {
            padding-block: .25em;
          }
        }
      }
    }
  }

  button[aria-expanded] {
    @extend .bi;
    display: flex;
    align-items: center;
    justify-content: flex-end;
    column-gap: 1ch;
    flex-direction: row-reverse;

    &::before {
      content: map.get($bootstrap-icons-map, 'chevron-down');

      @media not (prefers-reduced-motion: reduce) {
        transition: rotate .25s ease;
      }
    }
    
    &[aria-expanded='true'] {
      & + ul {
        opacity: 1;
        scale: 1;

        @media not (prefers-reduced-motion: reduce) {
          transition:
            scale var(--_anim_time_1) ease,
            opacity var(--_anim_time_2) ease calc(var(--_anim_time_1) - var(--_anim_time_2));
        }
      }

      &::before {
        rotate: -180deg;
      }
    }
  }

  @include mixins.mobile-nav {
    --_border-radius: .75em;
    --_inset-block: calc(var(--site-padding-inline) / 2);
    --_inset-inline: calc(var(--outer-padding-inline) - var(--_inset-block));
    --_padding-inline: var(--site-padding-inline);
    position: absolute;
    inset: var(--_inset-block) var(--_inset-inline) auto;
    background: var(--clr-nav-bg);
    border-radius: .5rem;
    padding-block-start: var(--header-block-size);
    color: var(--clr-nav-txt);
    block-size: auto;
    max-block-size: calc(100vh - var(--_inset-block) * 2);
    overflow: hidden;
    scale: 1 0;
    opacity: 0;
    transform-origin: top center;
    backdrop-filter: blur(.25rem);

    @media not (prefers-reduced-motion: reduce) {
      transition:
        scale var(--_anim_time_1) ease,
        opacity var(--_anim_time_2) ease;
    }

    $_parent_list: list.nth(&, 1);
    @at-root #{util.list-slice($_parent_list, 1, -1)} .site-nav-toggle[aria-expanded='true'] + #{list.nth($_parent_list, -1)} {
      scale: 1;
      opacity: 1;
  
      @media not (prefers-reduced-motion: reduce) {
        transition:
          scale var(--_anim_time_1) ease,
          opacity var(--_anim_time_2) ease calc(var(--_anim_time_1) - var(--_anim_time_2));
      }
    }

    li {
      position: relative;

      %current-marker {
        text-decoration: underline solid var(--clr-dark-accent-400) .2em;
        text-underline-offset: .35em;
      }
      %current-marker-hover {
        text-decoration-color: #fff;
      }

      &:has([aria-current]) {
        & > a {
          box-shadow: none;
          @extend %current-marker;
        }

        &:where(:hover, :focus-visible) > a {
          @extend %current-marker-hover;
        }

        & > button {
          $_parent: &;

          span {
            @extend %current-marker;

            @at-root #{$_parent}:where(:hover, :focus-visible) #{list.nth(list.nth(&, 1), -1)} {
              @extend %current-marker-hover;
            }
          }
        }
      }
      
      & > :where(a, button) {
        inline-size: 100%;
        text-align: start;
        padding: calc(var(--_padding-block) / 3 * 2) var(--_padding-inline);

        &:where(:hover, :focus-visible) {
          background: var(--clr-light-accent-200);
          outline: none;
        }
      }
    }

    & > ul {
      flex-direction: column;
      block-size: revert;
      
      & > li  {
        $_parent: &;
        
        ul {
          position: static;
          background-color: transparent;
          border: 0 none transparent;
          overflow: hidden;
          block-size: 0;
          transition: none;

          @supports (block-size: calc-size(auto)) {  // progressive enhancement
            @media not (prefers-reduced-motion: reduce) {
              transition:
                block-size var(--_anim_time_1) ease,
                opacity var(--_anim_time_2) ease;
            }
          }

          @at-root #{$_parent} > button[aria-expanded='true'] + #{list.nth(list.nth(&, 1), -1)} {
            block-size: auto;
            block-size: calc-size(auto);  // progressive enhancement
            transition: none;

            @supports (block-size: calc-size(auto)) {  // progressive enhancement
              @media not (prefers-reduced-motion: reduce) {
                transition:
                  block-size var(--_anim_time_1) ease,
                  opacity var(--_anim_time_2) ease calc(var(--_anim_time_1) - var(--_anim_time_2));
              }
            }
          }

          & > li {
            :where(a, button) {
              padding-inline-start: calc(var(--_padding-inline) + 1.2rem);
            }

            &:where([role='separator']) {
              margin-inline-start: calc(var(--_padding-inline) + 1.2rem);
            }
          }
        }
      }
    }
  }
}
